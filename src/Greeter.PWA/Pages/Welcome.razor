@using System.Text.Json

<div class="flex-col f1" style="gap:2rem;overflow:auto;max-height:calc(100dvh - 220px - env(safe-area-inset-bottom));scrollbar-width:none">
    <div class="flex jcsb aic">
        <h4>Welcome!</h4>
        <small>Today's <b>@DateTime.Now.ToString("d MMMM, yyyy")</b></small>
    </div>
    <div class="flex-col">
        <p style="color:#25D366" class="sub-header">
            <b style="font-weight:500;font-size:18px">Events today</b>
            @(todaysEvents.Length > 0 ? $"({todaysEvents.Length})" : "")
        </p>
        @if (todaysEvents.Length == 0)
        {
            <small class="muted-color">No events today.</small>
        }
        <div class="flex-col g0">
            @foreach (var evt in todaysEvents)
            {
                <div class="flex jcsb aic">
                    <p>@evt.Name  @((MarkupString)HowMuch(evt.Date))</p>
                    <div class="flex aic g0">
                        <Button Type="ButtonType.Ghost" Style="padding:4px;zoom:70%" OnClick="() => SendSMS(evt)">
                            <img src="sms.png" />
                        </Button>
                        <Button Type="ButtonType.Ghost" Style="padding:4px;zoom:70%" OnClick="() => SendWhatsApp(evt)">
                            <img src="whatsapp.png" />
                        </Button>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="flex-col">
        <div class="flex jcsb aic">
            <p style="color:#FA8128" class="sub-header">
                <b style="font-weight:500;font-size:18px">Upcoming events</b>
                @(upcomingEvents.Length > 0 ? $"({upcomingEvents.Length})" : "")
            </p>
            <div class="flex aic">
                <small class="muted-color">Days</small>
                <Select TItem="int" Display="x => x.ToString()" Placeholder="Choose days..." Items="[10, 30, 60, 90, 120, 150]"
                        SelectedItem="eventsUpcomingDays" OnItemSelect="UpdateList"
                        Width="85px" ListWidth="85px" />
            </div>
        </div>
        @if (upcomingEvents.Length == 0)
        {
            <small class="muted-color">No upcoming events in next @eventsUpcomingDays days.</small>
        }
        @foreach (var evt in upcomingEvents)
        {
            <div class="flex jcsb aifs">
                <p>@evt.Name @((MarkupString)HowMuch(evt.Date))</p>
                <small class="muted-color">@((MarkupString)ShowDate(evt.Date))</small>
            </div>
        }
    </div>
</div>

@code
{
    EventModel[] todaysEvents = [];
    EventModel[] upcomingEvents = [];
    int eventsUpcomingDays = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadEvents()
    {
        var json = await browserExtensions.GetFromLocalStorage("events");
        if (string.IsNullOrWhiteSpace(json)) return;
        var models = JsonSerializer.Deserialize<EventModel[]>(json) ?? [];
        if (models.Length > 0)
        {
            var today = DateTime.Now;
            todaysEvents = models.Where(x => x.Date.Day == today.Day && x.Date.Month == today.Month).ToArray();

            // foreach(var m in models)
            // {
            //     Console.WriteLine($"{int.Parse(m.Date.ToString("Mdd"))} = {int.Parse(today.AddDays(eventsUpcomingDays).ToString("Mdd"))}");
            //     Console.WriteLine($"{int.Parse(m.Date.ToString("Mdd")) <= int.Parse(today.AddDays(eventsUpcomingDays).ToString("Mdd"))}");
            // }

            upcomingEvents = models.Where(x =>
                int.Parse(x.Date.ToString("Mdd")) > int.Parse(today.ToString("Mdd")) &&
                int.Parse(x.Date.ToString("Mdd")) <= int.Parse(today.AddDays(eventsUpcomingDays).ToString("Mdd"))
                )
                .OrderBy(x => x.Date.Month)
                .ThenBy(x => x.Date.Day)
                .ToArray();
        }
    }

    private void SendSMS(EventModel evt)
    {
        var message = Uri.EscapeDataString(evt.Message);
        var url = $"sms:{evt.Mobile}?body={message}";
        browserExtensions.Goto(url);
    }

    private void SendWhatsApp(EventModel evt)
    {
        var message = Uri.EscapeDataString(evt.Message);
        var url = $"https://wa.me/{evt.Mobile}?text={message}";
        browserExtensions.Goto(url);
    }

    private string ShowDate(DateTime date)
    {
        if (new int[] { 1, 21, 31 }.Contains(date.Day))
            return date.ToString("d'<sup>st</sup>' MMM");
        if (new int[] { 2, 22 }.Contains(date.Day))
            return date.ToString("d'<sup>nd</sup>' MMM");
        if (new int[] { 3, 23 }.Contains(date.Day))
            return date.ToString("d'<sup>rd</sup>' MMM");
        return date.ToString("d'<sup>th</sup>' MMM");
    }

    private async Task UpdateList(int days)
    {
        eventsUpcomingDays = days;
        await LoadEvents();
        await InvokeAsync(StateHasChanged);
    }

    private string HowMuch(DateTime date)
    {
        var years = DateTime.Now.Year - date.Year;
        if (years <= 0) return string.Empty;

        if (new int[] { 1, 21, 31, 41, 51, 61, 71, 81, 91, 101, 201, 301, 401 }.Contains(years))
            return years.ToString("(0'<sup>st</sup>')");
        if (new int[] { 2, 22, 32, 42, 52, 62, 72, 82, 92, 102, 202, 302, 402 }.Contains(years))
            return years.ToString("(0'<sup>nd</sup>')");
        if (new int[] { 3, 23, 33, 43, 53, 63, 73, 83, 93, 103, 203, 303, 403 }.Contains(years))
            return years.ToString("(0'<sup>rd</sup>')");
        return years.ToString("(0'<sup>th</sup>')");
    }
}