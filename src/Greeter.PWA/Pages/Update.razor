<div class="flex-col f1" style="gap:2rem;overflow:auto;max-height:calc(100dvh - env(safe-area-inset-bottom));scrollbar-width:none">
    <div class="flex jcsb aifs">
        <div class="flex-col g4">
            <h4>Update event</h4>
            <small class="muted-color">You can delete from the event's list, if required.</small>
        </div>
    </div>
    <div class="flex-col">
        <Input Id="focusElement" Focus Label="Event name" Placeholder="eg: Rahul's Birthday" @bind-Value="Model.Name" OnBlur="UpdateMessage" />
        <Input Label="Mobile No. (prefix with country code)" Placeholder="eg: +919000000000" @bind-Value="Model.Mobile" Info="This is used to send SMS and/or WhatsApp message." />
        <Group Label="Event Date" Info="Day and month is enough, if you don't have exact date.">
            @if (showNativeDate)
            {
                <input type="date" @bind="Model.Date" class="sbcinput" />
            }
            else
            {
                <DatePicker Format="dd MMMM, yyyy" Date="@Model.Date" DateChanged="x => Model.Date = x.GetValueOrDefault()" />
            }
        </Group>
        <Textarea Label="Message to send" Placeholder="eg: Message you want to send ..." @bind-Text="Model.Message" Rows="7" />
    </div>
    <div class="flex jcc">
        <Button Text="Update Event" OnClick="UpdateEvent" />
        <Button Text="Go Back" Type="ButtonType.Outline" OnClick="OnClose" />
    </div>
</div>

@code
{
    [Parameter] public EventModel Model { get; set; } = default!;
    [Parameter] public EventCallback OnClose { get; set; }

    ICollection<EventModel> Models = [];
    bool showNativeDate;

    string birthday = "🎉🎂 Happy Birthday! 🎈💖\nWishing you a day full of laughter 😂, love 💕, cake 🍰, and magic ✨!\nStay awesome 😎 and keep shining 🌟! 🎁🎊";
    string anniversary = "💍❤️ Happy Anniversary! 🥂🌹\nWishing you both endless love 💑, laughter 😂, and a lifetime of beautiful memories 🌟.\nMay your bond grow stronger with each passing year! 💖🎊🎉";

    protected override async Task OnInitializedAsync()
    {
        showNativeDate = await browserExtensions.IsTouchDevice();
        stateManager.Publish("update", 5);

        Models = await greeterService.LoadEvents();

        var found = Models.FirstOrDefault(x =>
            x.Name == Model.Name &&
            x.Mobile == Model.Mobile &&
            x.Date == Model.Date &&
            x.Message == Model.Message);

        if (found is not null) Models.Remove(found);
        await browserExtensions.SetFocus("#focusElement");
    }

    private void UpdateMessage()
    {
        if (string.IsNullOrWhiteSpace(Model.Mobile)) Model.Mobile = "+";

        if (string.IsNullOrWhiteSpace(Model.Message))
        {
            Model.Message = Model.Name.ToLower().Contains("birthday")
                ? birthday : Model.Name.ToLower().Contains("anni")
                ? anniversary : string.Empty;
        }
    }

    private async Task UpdateEvent()
    {
        if (Model.Mobile.Length < 5) Model.Mobile = "";

        var eventExists = Models.Any(x =>
            x.Mobile.Equals(Model.Mobile, StringComparison.OrdinalIgnoreCase) &&
            x.Date.Day == Model.Date.Day && x.Date.Month == Model.Date.Month);

        if (eventExists || string.IsNullOrWhiteSpace(Model.Name) || string.IsNullOrWhiteSpace(Model.Message)) return;

        Models.Add(Model);
        await greeterService.SaveEvents(Models);
        await OnClose.InvokeAsync();
    }    
}
